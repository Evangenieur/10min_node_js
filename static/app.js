// Generated by CoffeeScript 1.6.1
(function() {
  var __slice = [].slice;

  window.addEventListener("load", function() {
    var cmds, lastAt, playing, rec, recorded, recording, renderRecord, setupHandler;
    tty.socket.on("disconnect", function() {
      return setTimeout(function() {
        return window.location.reload();
      }, 1000);
    });
    cmds = ["vim ./async.js\n", "i", ""];
    recorded = {};
    lastAt = null;
    recording = false;
    playing = false;
    renderRecord = function(name, data) {
      var elem, length, total, tpl;
      tpl = ("<div id=\"recorded_" + name + "\" class=\"entry\">\n  <span class=\"name\">" + name + "</span>") + ((function() {
        var _i, _len;
        if (data != null ? data.length : void 0) {
          total = 0;
          for (_i = 0, _len = data.length; _i < _len; _i++) {
            elem = data[_i];
            total += elem.at;
          }
          return "<p class=\"info\">\n  <span class=\"length\">" + (length = data.length) + "</span>\n  <span class=\"duration\">" + (Math.round(total / 100) / 10) + "</span>\n</p>";
        } else {
          return "<button class=\"stop\">Stop</button>";
        }
      })()) + "</div>";
      if ($("#recorded_" + name).length) {
        $("#recorded_" + name).replaceWith(tpl);
      } else {
        $("#recorder").append(tpl);
      }
      if (!(data != null ? data.length : void 0)) {
        $("#recorded_" + name + " .stop").click(function() {
          $(this).remove();
          stopRecorder(name);
          return false;
        });
      }
      return $("#recorded_" + name).click(function() {
        if (!playing && !recording) {
          console.log("playing");
          playRecorded(name, function() {
            return $("#recorded_" + name + " .playpause").remove();
          });
          $("#recorded_" + name + " p").before(" \n<button class=\"playpause\">||</button>");
          return $("#recorded_" + name + " .playpause").click(function() {
            if (playing) {
              playing = false;
              $(this).html("Play");
            } else {
              playing = true;
              $(this).html("||");
            }
            return false;
          });
        }
      });
    };
    tty.socket.on("records", function(records) {
      var data, name, _results;
      recorded = records;
      _results = [];
      for (name in recorded) {
        data = recorded[name];
        _results.push(renderRecord(name, data));
      }
      return _results;
    });
    setupHandler = function(id, tab, recorder) {
      var oldHandler;
      oldHandler = tab.handler;
      lastAt = null;
      tab.handler = function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        lastAt || (lastAt = (new Date()).getTime());
        recorder.push({
          target: id,
          key: args[0],
          at: (new Date()).getTime() - lastAt
        });
        lastAt = (new Date()).getTime();
        return oldHandler.apply(tab, args);
      };
      return tab.endRecord = function() {
        tab.handler = oldHandler;
        return delete tab.endRecord;
      };
    };
    window.startRecorder = function(name) {
      var i, tab, tty_name, _ref;
      recording = true;
      i = 0;
      _ref = tty.terms;
      for (tty_name in _ref) {
        tab = _ref[tty_name];
        console.log("Setup recorder " + name + " for", tty_name);
        setupHandler(i, tab, recorded[name] || (recorded[name] = []));
        i++;
      }
      return renderRecord(name, recorded[name]);
    };
    window.stopRecorder = function(name) {
      var records, tab, tty_name, _ref;
      records = recorded[name];
      _ref = tty.terms;
      for (tty_name in _ref) {
        tab = _ref[tty_name];
        console.log("Stopping recorder for", tty_name);
        if (typeof tab.endRecord === "function") {
          tab.endRecord();
        }
      }
      renderRecord(name, recorded[name]);
      tty.socket.emit("record", name, recorded[name]);
      recording = false;
      return console.log(JSON.stringify(recorded[name]));
    };
    window.playRecorded = function(name, cb) {
      var i, objs, setupNext, tab, tty_name;
      if (recorded[name] == null) {
        return;
      }
      playing = true;
      i = 0;
      objs = (function() {
        var _ref, _results;
        _ref = tty.terms;
        _results = [];
        for (tty_name in _ref) {
          tab = _ref[tty_name];
          _results.push(tab);
        }
        return _results;
      })();
      console.log(objs);
      return (setupNext = function() {
        var nextStep, step;
        if (!playing) {
          setTimeout(setupNext, recorded[name][i].at);
          return;
        }
        step = recorded[name][i];
        objs[step.target].send(step.key);
        i++;
        if (nextStep = recorded[name][i]) {
          return setTimeout(setupNext, nextStep.at);
        } else {
          playing = false;
          return typeof cb === "function" ? cb() : void 0;
        }
      })();
    };
    /* Steup Recorder part
    */

    $("#record-name").focus(function() {
      return Terminal.focus = null;
    });
    rec = function() {
      if ($("#record-name").val()) {
        startRecorder($("#record-name").val());
        return $("#record-name").val("");
      }
    };
    $("#record-name").keypress(function(e) {
      if (e.which === 13) {
        return rec();
      }
    });
    $("#record").click(rec);
    /* Setup Terms
    */

    return tty.on("connect", function() {
      var win;
      win = new tty.Window;
      return win.on("open", function() {
        var newHeight, newRows, win2;
        console.log("Win opened", win.element.clientHeight, win.focused.rows);
        console.log(newHeight = ($(window).height() - 60) / 2);
        console.log(newRows = Math.floor(newHeight / win.element.clientHeight * win.focused.rows));
        win.resize(win.focused.cols, newRows);
        console.log(win.focused);
        win.element.style.top = "60px";
        win.element.style.left = "1px";
        win2 = new tty.Window;
        return win2.on("open", function() {
          console.log("Win2 opened " + win.element.clientHeight);
          win2.element.style.top = "" + (win.element.clientHeight + 60) + "px";
          win2.element.style.left = "1px";
          return win2.resize(win.focused.cols, newRows);
        });
      });
    });
  });

}).call(this);
